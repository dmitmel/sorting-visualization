initSidebarItems({"constant":[["BACK_END_MAX_VERTEX_COUNT","Any triangulation method called on the back-end never exceeds this number of vertices. This can be used to initialize buffers that fit the chunk size."]],"fn":[["circle_arc","Draws arc"],["clear","Clears the screen."],["ellipse","Draws ellipse."],["image","Draws image."],["line","Draws line."],["polygon","Draws polygon."],["rectangle","Draws rectangle."],["text","Draws text."]],"mod":[["character","A text character"],["circle_arc","Draw an arc"],["color","Helper methods for colors"],["context","Transformation context"],["deform","Least square deforming of a 2D grid."],["draw_state","Graphics draw state."],["ellipse","Draw ellipse"],["glyph_cache","Implementations of the `CharacterCache` trait."],["grid","A flat grid with square cells."],["image","Draw an image"],["line","Draw Line"],["math","Various methods for computing with vectors."],["modular_index","Helper functions for computing modular index safely."],["polygon","Draw polygon"],["radians","Reexport radians helper trait from vecmath"],["rectangle","Draw rectangle"],["text","Draw text"],["triangulation","Methods for converting shapes into triangles."],["types","Contains type aliases used in this library"]],"struct":[["Viewport","Stores viewport information."]],"trait":[["Colored","Implemented by contexts that contains color."],["Graphics","Implemented by all graphics back-ends."],["ImageSize","Implemented by all images to be used with generic algorithms."],["Rectangled","Should be implemented by contexts that have rectangle information."],["SourceRectangled","Should be implemented by contexts that have source rectangle information."],["Transformed","Implemented by contexts that can transform."]]});