initSidebarItems({"enum":[["Button","Models different kinds of buttons."],["ButtonState","Stores button state."],["Event","Models all events."],["HatState",""],["Input","Models input events."],["Loop","Models loop events."],["Motion","Models different kinds of motion."],["Touch","Stores the touch state."]],"mod":[["controller","Back-end agnostic controller events."],["generic_event","Trait for generic events"],["keyboard","Back-end agnostic keyboard keys."],["mouse","Back-end agnostic mouse buttons."]],"struct":[["AfterRenderArgs","After render arguments."],["ButtonArgs","Button arguments"],["CloseArgs","Close arguments."],["EventId","Used to identify events arguments provided by traits."],["IdleArgs","Idle arguments, such as expected idle time in seconds."],["RenderArgs","Render arguments"],["TouchArgs","Touch arguments"],["UpdateArgs","Update arguments, such as delta time in seconds"]],"trait":[["AfterRenderEvent","After rendering and buffers are swapped."],["ButtonEvent","Changed button state."],["CloseEvent","Window is closing."],["CursorEvent","When window gets or loses cursor"],["FocusEvent","When window gets or loses focus"],["IdleEvent","When background tasks should be performed"],["PressEvent","The press of a button"],["ReleaseEvent","The release of a button"],["RenderEvent","When the next frame should be rendered"],["ResizeEvent","When the window is resized"],["TextEvent","When receiving text from user, such as typing a character"],["TouchEvent","When a touch is started, moved, ended or cancelled."],["UpdateEvent","When the application state should be updated"]]});